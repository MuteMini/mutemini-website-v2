{"version":3,"sources":["../../../src/link.tsx","components/Navbar.jsx","../../../src/responsive.ts","../../../src/stack.utils.tsx","../../../src/stack.tsx","../../../src/children.ts"],"names":["Link","forwardRef","styles","useStyleConfig","omitThemingProps","isExternal","target","rel","ref","className","cx","__css","CustomLink","props","to","link","as","RouterLink","pos","style","webkitTextStroke","whiteSpace","_hover","textShadow","transform","transition","fontSize","children","NavBar","PreNavBar","borderSize","padding","spacing","mainpage","Object","mapResponsive","prop","isArray","item","mapper","isObject","object","result","selector","StackItem","display","flex","minWidth","Stack","direction","shouldWrapChildren","isInline","directionProp","options","directionStyles","column","marginTop","marginEnd","marginBottom","marginStart","row","flexDirection","value","getStackStyles","dividerStyle","dividerStyles","my","mx","borderLeftWidth","borderBottomWidth","getDividerStyles","hasDivider","shouldUseChildren","validChildren","React","child","getValidChildren","clones","key","isLast","index","_child","_divider","_className","alignItems","justifyContent","flexWrap","HStack","align","VStack"],"mappings":"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","file":"static/js/9.1c1e004b.chunk.js","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">((props, ref) => {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener noreferrer\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Link.displayName = \"Link\"\n}\n","import { HStack, Link } from \"@chakra-ui/react\"\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nfunction CustomLink(props) {\r\n    return (\r\n        <Link \r\n            to={props.link}\r\n            as={RouterLink}\r\n            pos=\"inherit\"\r\n            style={{webkitTextStroke: \"1.5px var(--chakra-colors-palette-900)\", whiteSpace: \"nowrap\"}}\r\n            _hover={{\r\n                textShadow: \"4px 4px 3px lightgray\",\r\n                transform: \"scale(1.1)\"\r\n            }}\r\n            transition=\"text-shadow 0.5s linear, transform 0.4s ease\"\r\n            fontSize=\"2xl\">\r\n            {props.children}\r\n        </Link>\r\n    );\r\n}\r\n\r\nfunction NavBar({ mainpage }) {\r\n    const PreNavBar = (props) => (\r\n        <HStack as=\"nav\" pos=\"sticky\" borderSize={1} padding={2} spacing={7}>\r\n            {props.children}\r\n            <CustomLink link=\"/about\"> About Me </CustomLink>\r\n            <CustomLink link=\"/project\"> Projects </CustomLink>\r\n            <CustomLink link=\"/contact\"> Contacts </CustomLink>\r\n        </HStack>\r\n    );\r\n\r\n    if (mainpage) {\r\n        return (\r\n            <PreNavBar>\r\n                <CustomLink link=\"/\"> Homepage </CustomLink>\r\n            </PreNavBar>\r\n        );\r\n    }\r\n    else {\r\n        return <PreNavBar />\r\n    }\r\n}\r\n\r\nexport default NavBar;","import { getLastItem } from \"./array\"\nimport { isArray, isObject } from \"./assertion\"\nimport { objectKeys } from \"./object\"\nimport { Dict } from \"./types\"\n\nexport const breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\",\n])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n\n/**\n * since breakpoints are defined as custom properties on an array, you may\n * `Object.keys(theme.breakpoints)` to retrieve both regular numeric indices\n * and custom breakpoints as string.\n *\n * This function returns true given a custom array property.\n */\nexport const isCustomBreakpoint = (maybeBreakpoint: string) =>\n  Number.isNaN(Number(maybeBreakpoint))\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\n/**\n * If we ever run into SSR issues with this, check this post to find a fix for it:\n * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n */\nexport const selector = \"& > *:not(style) ~ *:not(style)\"\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getStackStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const directionStyles = {\n    column: {\n      marginTop: spacing,\n      marginEnd: 0,\n      marginBottom: 0,\n      marginStart: 0,\n    },\n    row: { marginTop: 0, marginEnd: 0, marginBottom: 0, marginStart: spacing },\n    \"column-reverse\": {\n      marginTop: 0,\n      marginEnd: 0,\n      marginBottom: spacing,\n      marginStart: 0,\n    },\n    \"row-reverse\": {\n      marginTop: 0,\n      marginEnd: spacing,\n      marginBottom: 0,\n      marginStart: 0,\n    },\n  }\n\n  return {\n    flexDirection: direction,\n    [selector]: mapResponsive(direction, (value) => directionStyles[value]),\n  }\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(direction, (value) => dividerStyles[value]),\n  }\n}\n","import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        // Prefer provided child key, fallback to index\n        const key = typeof child.key !== \"undefined\" ? child.key : index\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={key}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n","import * as React from \"react\"\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport function getValidChildren(children: React.ReactNode) {\n  return React.Children.toArray(children).filter((child) =>\n    React.isValidElement(child),\n  ) as React.ReactElement[]\n}\n"],"sourceRoot":""}