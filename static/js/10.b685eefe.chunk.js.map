{"version":3,"sources":["../../../src/use-safe-layout-effect.ts","../../../src/image.tsx","../../../src/use-image.ts","components/Carousel.jsx"],"names":["useSafeLayoutEffect","isBrowser","React","NativeImage","alt","width","height","ref","Image","forwardRef","crossOrigin","shouldIgnore","loading","fallbackSrc","fallback","status","props","ignoreFallback","useState","useEffect","setStatus","src","imageRef","useRef","load","useCallback","flush","img","event","onLoad","error","onError","srcSet","sizes","useImage","shared","objectFit","objectPosition","align","rest","omit","as","className","Carousel","arrowStyles","cursor","pos","top","w","mt","p","color","fontWeight","fontSize","base","md","lg","transition","borderRadius","userSelect","_hover","bg","slides","currentSlide","setCurrentSlide","slidesCount","length","carouselStyle","ml","forEach","slide","imgCache","read","process","alignItems","justifyContent","overflow","border","maxW","h","map","sid","boxSize","shadow","flex","backgroundSize","variant","left","onClick","s","right"],"mappings":"kMAaaA,E,OAAsBC,EAC/BC,kBACAA,Y,qVCSJ,IAAMC,EAAc,cAClB,cAAkD,IAC1C,EAAN,EAAM,YAAN,EAAM,WAAyBC,EAA/B,EAA+BA,IAA/B,wCACA,OACE,yBACEC,MADF,EAEEC,OAFF,EAGEC,IAHF,EAIEH,IAAKA,GALT,OAyDSI,EAAQC,aAA8B,cAAgB,IAC3D,EAAN,EAAM,cAAN,EAAM,WAAN,EAAM,MAAN,EAAM,SAAN,EAAM,QAAN,EAAM,MAAN,EAAM,UAAN,EAAM,eASJC,EATF,EASEA,YATF,wGAiBMC,EACJC,iBAECC,YArB8D,IAqBjCC,EAE1BC,EC3CD,SAAkBC,GAAsB,IACvC,EAAN,EAAM,UAAN,EAAM,MAAN,EAAM,SAAN,EAAM,SAAN,EAAM,UAAN,EAAM,cAAN,EAAM,MAQJC,EARF,EAQEA,eAT2C,EAYjBC,mBAA5B,WAZ6C,mBAYvC,EAZuC,KAYvC,EAZuC,KAc7CC,qBAAU,WACRC,EAAUC,EAAM,UAAhBD,aACC,CAFHD,IAIA,IAAMG,EAAWC,mBAEXC,EAAOC,uBAAY,WACvB,MAEAC,IAEA,IAAMC,EAAM,IAAZ,MACAA,QACA,IAAiBA,iBACjB,IAAYA,YACZ,IAAWA,WACX,IAAaA,aAEbA,SAAcC,YACZF,IACAN,YACAS,eAEFF,UAAeG,YACbJ,IACAN,YACAW,eAGFT,eACC,CAACD,EAAKX,EAAasB,EAAQC,EAAOJ,EAAQE,EAxB7C,IA0BML,EAAQ,WACRJ,EAAJ,UACEA,sBACAA,uBACAA,iBAuBJ,OAnBAtB,GAAoB,WAKlB,MAKA,MAHA,YAAIe,GACFS,IAEK,WACLE,OAED,CAACX,EAAQS,EAbZxB,IAmBOiB,EAAiB,SAAxB,ED9BeiB,CAAS,EAAD,MAErBjB,eAAgBN,KAGZwB,EAAS,EAAH,CACV5B,MACA6B,UAFU,EAGVC,eAAgBC,GACZ3B,EAAe4B,EAAOC,YAAKD,EAAM,CAAC,UAJxC,YAOA,iBAAIxB,EAKF,GAGE,gBAAC,IAAD,OACE0B,GADF,EAEEC,UAFF,4BAGErB,IAAKR,GAJT,IAWA,gBAAC,IAAD,OACE4B,GADF,EAEEpB,IAFF,EAGEW,OAHF,EAIEtB,YAJF,EAKEE,QALF,EAME8B,UAAU,gBAPd,OAuBE,EAAJ,IACElC,uB,8BEzEamC,UAhFf,WACI,IAAMC,EAAc,CAChBC,OAAQ,UACRC,IAAK,WACLC,IAAK,MACLC,EAAG,OACHC,GAAI,QACJC,EAAG,OACHC,MAAO,QACPC,WAAY,OACZC,SAAU,CAACC,KAAM,OAAQC,GAAI,OAAQC,GAAI,QACzCC,WAAY,YACZC,aAAc,MACdC,WAAY,OACZC,OAAQ,CACJC,GAAI,uBAINC,EAAS,CACX,CAAEnC,IAAK,sBACP,CAAEA,IAAK,sBACP,CAAEA,IAAK,sBACP,CAAEA,IAAK,sBACP,CAAEA,IAAK,sBACP,CAAEA,IAAK,sBACP,CAAEA,IAAK,sBACP,CAAEA,IAAK,sBACP,CAAEA,IAAK,uBA5BI,EA+ByBT,mBAAS,GA/BlC,mBA+BR6C,EA/BQ,KA+BMC,EA/BN,KAgCTC,EAAcH,EAAOI,OASrBC,EAAgB,CAClBV,WAAY,UACZW,GAAG,IAAD,OAAqB,IAAfL,EAAN,MAKN,OAFAD,EAAOO,SAAQ,SAACC,GAAD,OAAWC,IAASC,KAAKC,uBAAuBH,EAAM3C,QAGjE,cAAC,IAAD,CACIqB,EAAE,OACFE,EAAG,CAACI,KAAK,EAAGC,GAAG,GACfmB,WAAW,SACXC,eAAe,SAJnB,SAMI,eAAC,IAAD,CAAM3B,EAAE,OACJ4B,SAAS,SACT9B,IAAI,WACJ+B,OAAQ,CAACvB,KAAK,6CAA8CC,GAAG,+CAC/DG,aAAc,CAACJ,KAAK,OAAQC,GAAG,QAC/BuB,KAAK,SALT,UAOI,cAAC,IAAD,yBAAMC,EAAE,qBAAqB/B,EAAE,QAAWmB,GAA1C,aACKL,EAAOkB,KAAI,SAACV,EAAOW,GAAR,OACZ,cAAC,IAAD,CAA0BC,QAAQ,OAAOC,OAAO,KAAKC,KAAK,OAA1D,SACI,cAAC,EAAD,CAAO/D,IAAKoD,uBAAuBH,EAAM3C,IAAKuD,QAAQ,OAAOG,eAAe,WADhF,gBAAmBJ,UAKvB,cAAC,IAAD,2BAAUrC,GAAV,IAAuB0C,QAAQ,QAAQC,KAAK,IAAIC,QAnC1C,WACdxB,GAAgB,SAACyB,GAAD,OAAc,IAANA,EAAUxB,EAAc,EAAIwB,EAAI,MAkChD,qBAGA,cAAC,IAAD,2BAAU7C,GAAV,IAAuB0C,QAAQ,QAAQI,MAAM,IAAIF,QAnC3C,WACdxB,GAAgB,SAACyB,GAAD,OAAQA,IAAMxB,EAAc,EAAI,EAAIwB,EAAI,MAkChD","file":"static/js/10.b685eefe.chunk.js","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\n\n/**\n * useSafeLayoutEffect enables us to safely call `useLayoutEffect` on the browser\n * (for SSR reasons)\n *\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect in the browser.\n *\n * @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n */\nexport const useSafeLayoutEffect = isBrowser\n  ? React.useLayoutEffect\n  : React.useEffect\n","import {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useImage, UseImageProps } from \"./use-image\"\n\ninterface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nconst NativeImage = React.forwardRef(\n  (props: NativeImageProps, ref: React.Ref<any>) => {\n    const { htmlWidth, htmlHeight, alt, ...rest } = props\n    return (\n      <img\n        width={htmlWidth}\n        height={htmlHeight}\n        ref={ref}\n        alt={alt}\n        {...rest}\n      />\n    )\n  },\n)\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">((props, ref) => {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    ...rest\n  } = props\n\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n  const shouldIgnore =\n    loading != null ||\n    ignoreFallback ||\n    (fallbackSrc === undefined && fallback === undefined) // if the user doesn't provide any kind of fallback we should ignore it\n\n  const status = useImage({\n    ...props,\n    ignoreFallback: shouldIgnore,\n  })\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nexport interface ImgProps extends HTMLChakraProps<\"img\">, NativeImageOptions {}\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nexport const Img = forwardRef<ImgProps, \"img\">((props, ref) => (\n  <chakra.img ref={ref} as={NativeImage} className=\"chakra-image\" {...props} />\n))\n\nif (__DEV__) {\n  Image.displayName = \"Image\"\n}\n","import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\ntype NativeImageProps = ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import { Flex, \r\n    Box, \r\n    Text,\r\n    Image } from \"@chakra-ui/react\"\r\nimport { useState } from 'react'\r\nimport imgCache from '../imgCache'\r\n\r\nfunction Carousel(){\r\n    const arrowStyles = {\r\n        cursor: \"pointer\",\r\n        pos: \"absolute\",\r\n        top: \"50%\",\r\n        w: \"auto\",\r\n        mt: \"-30px\",\r\n        p: \"16px\",\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        fontSize: {base: \"20px\", md: \"30px\", lg: \"50px\"},\r\n        transition: \"0.6s ease\",\r\n        borderRadius: \"3px\",\r\n        userSelect: \"none\",\r\n        _hover: {\r\n            bg: \"rgba(0, 0, 0, 0.5)\",\r\n        },\r\n    };\r\n\r\n    const slides = [\r\n        { img: '/img/carousel1.jpg', },\r\n        { img: '/img/carousel2.jpg', },\r\n        { img: '/img/carousel3.jpg', },\r\n        { img: '/img/carousel4.jpg', },\r\n        { img: '/img/carousel5.jpg', },\r\n        { img: '/img/carousel6.jpg', },\r\n        { img: '/img/carousel7.jpg', },\r\n        { img: '/img/carousel8.jpg', },\r\n        { img: '/img/carousel9.jpg', }\r\n    ];\r\n\r\n    const [currentSlide, setCurrentSlide] = useState(0);\r\n    const slidesCount = slides.length;\r\n\r\n    const prevSlide = () => {\r\n        setCurrentSlide((s) => (s === 0 ? slidesCount - 1 : s - 1));\r\n    };\r\n    const nextSlide = () => {\r\n        setCurrentSlide((s) => (s === slidesCount - 1 ? 0 : s + 1));\r\n    };\r\n\r\n    const carouselStyle = {\r\n        transition: \"all .5s\",\r\n        ml: `-${currentSlide * 100}%`,\r\n    };\r\n\r\n    slides.forEach((slide) => imgCache.read(process.env.PUBLIC_URL+slide.img));\r\n\r\n    return (\r\n        <Flex\r\n            w=\"full\"\r\n            p={{base:1, md:5}}\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n        >\r\n            <Flex w=\"full\" \r\n                overflow=\"hidden\" \r\n                pos=\"relative\" \r\n                border={{base:\"5px solid var(--chakra-colors-palette-500)\", md:\"10px solid var(--chakra-colors-palette-500)\"}}\r\n                borderRadius={{base:\"10px\", md:\"20px\"}}\r\n                maxW=\"1100px\"\r\n            >\r\n                <Flex h=\"calc(100% / (4/3))\" w=\"full\" {...carouselStyle}>\r\n                    {slides.map((slide, sid) => (\r\n                    <Box key={`slide-${sid}`} boxSize=\"full\" shadow=\"md\" flex=\"none\">\r\n                        <Image src={process.env.PUBLIC_URL+slide.img} boxSize=\"full\" backgroundSize=\"cover\" />\r\n                    </Box>\r\n                ))}\r\n                </Flex>\r\n                <Text {...arrowStyles} variant=\"light\" left=\"0\" onClick={prevSlide}>\r\n                    &#10094;\r\n                </Text>\r\n                <Text {...arrowStyles} variant=\"light\" right=\"0\" onClick={nextSlide}>\r\n                    &#10095;\r\n                </Text>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default Carousel;"],"sourceRoot":""}